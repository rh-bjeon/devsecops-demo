- name: Create OpenShift Objects for Openshift Pipeline Tasks
  k8s:
    state: present
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/task-argo-sync-and-wait.yaml.j2
  - ./templates/task-dependency-report.yaml.j2
  - ./templates/task-gatling.yaml.j2
  - ./templates/task-git-update-deployment.yaml.j2
  - ./templates/task-image-scan-task.yaml.j2
  - ./templates/task-mvn-cm.yaml.j2
  - ./templates/task-mvn.yaml.j2
  - ./templates/task-rox-deployment-check.yaml.j2
  - ./templates/task-rox-image-check.yaml.j2
  - ./templates/task-s2i-java-11.yaml.j2
  - ./templates/task-zap-proxy.yaml.j2

- name: Create OpenShift Objects for Openshift Pipeline Triggers
  k8s:
    state: present
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/trigger-eventlistener.yaml.j2
  - ./templates/trigger-eventlistener-route.yaml.j2
  - ./templates/trigger-gogs-triggerbinding.yaml.j2
  - ./templates/triggertemplate.yaml.j2

# Check Gogs
- name: Get gogs route
  kubernetes.core.k8s_info:
    kind: Route
    api_version: route.openshift.io/v1
    namespace: cicd
    name: gogs
  register: r_gogs_route
  retries: 10
  delay: 20
  until:
    - r_gogs_route.resources[0].spec.host is defined

- name: Debug gogs route
  debug:
    msg: "{{ r_gogs_route.resources[0].spec.host }}"

- name: Create OpenShift Objects for Openshift Pipelines Templates
  k8s:
    state: present
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/pipeline-build-dev.yaml.j2
  - ./templates/pipeline-build-stage.yaml.j2
  - ./templates/pipeline-build-pvc.yaml.j2

################
#### customized#
################

- name: Get gogs webhook route
  kubernetes.core.k8s_info:
    kind: Route
    api_version: route.openshift.io/v1
    namespace: cicd
    name: el-webhook
  register: r_gogs_webhook_route
  retries: 10
  delay: 20
  until:
    - r_gogs_webhook_route.resources[0].spec.host is defined

# Create gogs admin
- name: Ansible URI used for first user registration
  when: gogs_init
  ansible.builtin.uri:
    url: http://{{ r_gogs_route.resources[0].spec.host }}/user/sign_up
    method: POST
    body_format: json
    body:
      username: "{{ gogs_user }}"
      email: admin@gogs.com
      password: "{{ gogs_pwd }}"
      retype: "{{ gogs_pwd }}"
    return_content: true
    status_code: 200
    force_basic_auth: true
    follow_redirects: "yes"

# Check if gogs repos exists
- name: Check repos
  ansible.builtin.uri:
    url: http://{{ r_gogs_route.resources[0].spec.host }}/api/v1/user/repos
    method: GET
    user: "{{ gogs_user }}"
    password: "{{ gogs_pwd }}"
    body_format: json
    status_code: 200
    force_basic_auth: true
    follow_redirects: "yes"
  register: gogs_repos
  ignore_errors: true

# Create gogs repos
- name: Create repo - spring-petclinic
  ansible.builtin.uri:
    url: http://{{ r_gogs_route.resources[0].spec.host }}/api/v1/user/repos
    method: POST
    user: "{{ gogs_user }}"
    password: "{{ gogs_pwd }}"
    body_format: json
    body:
      name: spring-petclinic
    return_content: true
    status_code: 201
    force_basic_auth: true
    follow_redirects: "yes"
  when: "'spring-petclinic' not in gogs_repos['json'] | selectattr('name', 'defined') | map(attribute='name')"


- name: Create repo - spring-petclinic-config
  ansible.builtin.uri:
    url: http://{{ r_gogs_route.resources[0].spec.host }}/api/v1/user/repos
    method: POST
    user: "{{ gogs_user }}"
    password: "{{ gogs_pwd }}"
    body_format: json
    body:
      name: spring-petclinic-config
    return_content: true
    status_code: 201
    force_basic_auth: true
    follow_redirects: "yes"
  when: "'spring-petclinic-config' not in gogs_repos['json'] | selectattr('name', 'defined') | map(attribute='name')"

- name: Create repo - spring-petclinic-gatling
  ansible.builtin.uri:
    url: http://{{ r_gogs_route.resources[0].spec.host }}/api/v1/user/repos
    method: POST
    user: "{{ gogs_user }}"
    password: "{{ gogs_pwd }}"
    body_format: json
    body:
      name: spring-petclinic-gatling
    return_content: true
    status_code: 201
    force_basic_auth: true
    follow_redirects: "yes"
  when: "'spring-petclinic-gatling' not in gogs_repos['json'] | selectattr('name', 'defined') | map(attribute='name')"

# template git source
- name: template - git repo spring-petclinic-config
  ansible.builtin.template:
    src: roles/ocp4-install-pipelines/templates/petclinic-config-deployment.yaml.j2
    dest: roles/ocp4-install-pipelines/git/spring-petclinic-config/app/deployment.yaml

######
######
- name: Get stats of the spring-petclinic - git config
  ansible.builtin.stat:
    path: roles/ocp4-install-pipelines/git/spring-petclinic/.git
  register: git_spring_petclinic
  
- name: Get stats of the spring-petclinic-config - git config
  ansible.builtin.stat:
    path: roles/ocp4-install-pipelines/git/spring-petclinic-config/.git
  register: git_spring_petclinic_config

- name: Get stats of the spring-petclinic-gatling - git config
  ansible.builtin.stat:
    path: roles/ocp4-install-pipelines/git/spring-petclinic-gatling/.git
  register: git_spring_petclinic_gatling

# git init - spring-petclinic
- name: if no git config exists, git init repo spring-petclinic
  ansible.builtin.shell: | 
    git init
    git add .
    git config user.name "devsecops"
    git config user.email "devsecops@example.com"
    git remote add origin https://github.com/rcarrata/spring-petclinic
    git remote add gogs http://{{ gogs_user }}:{{ gogs_pwd }}@{{ r_gogs_route.resources[0].spec.host }}/{{ gogs_user }}/spring-petclinic
  args:
    chdir: roles/ocp4-install-pipelines/git/spring-petclinic
  when: git_spring_petclinic.stat.islnk is not defined
  register: result

- name: clone source code to git repo spring-petclinic
  ansible.builtin.shell: | 
    git commit --allow-empty -am "{{ lookup('pipe', 'date +%Y-%m-%d.%H:%M:%S') }}"
    git push -u gogs master
  args:
    chdir: roles/ocp4-install-pipelines/git/spring-petclinic
  when: git_spring_petclinic.stat.islnk is defined or result is changed

#####
# git init - spring-petclinic-config
- name: if no git config exists, git init repo spring-petclinic-config
  ansible.builtin.shell: | 
    git init
    git add .
    git config user.name "devsecops"
    git config user.email "devsecops@example.com"
    git remote add origin https://github.com/rcarrata/spring-petclinic-config
    git remote add gogs http://{{ gogs_user }}:{{ gogs_pwd }}@{{ r_gogs_route.resources[0].spec.host }}/{{ gogs_user }}/spring-petclinic-config
  args:
    chdir: roles/ocp4-install-pipelines/git/spring-petclinic-config
  when: git_spring_petclinic_config.stat.islnk is not defined
  register: result

- name: clone source code to git repo spring-petclinic-config
  ansible.builtin.shell: | 
    git commit --allow-empty -am "{{ lookup('pipe', 'date +%Y-%m-%d.%H:%M:%S') }}"
    git push -u gogs master
  args:
    chdir: roles/ocp4-install-pipelines/git/spring-petclinic-config
  when: git_spring_petclinic_config.stat.islnk is defined or result is changed
######

# git init - spring-petclinic-gatling
- name: if no git config exists, git init repo spring-petclinic-gatling
  ansible.builtin.shell: | 
    git init
    git add .
    git config user.name "devsecops"
    git config user.email "devsecops@example.com"
    git remote add origin https://github.com/rcarrata/spring-petclinic-gatling
    git remote add gogs http://{{ gogs_user }}:{{ gogs_pwd }}@{{ r_gogs_route.resources[0].spec.host }}/{{ gogs_user }}/spring-petclinic-gatling
  args:
    chdir: roles/ocp4-install-pipelines/git/spring-petclinic-gatling
  when: git_spring_petclinic_gatling.stat.islnk is not defined
  register: result

- name: clone source code to git repo spring-petclinic-gatling
  ansible.builtin.shell: | 
    git commit --allow-empty -am "{{ lookup('pipe', 'date +%Y-%m-%d.%H:%M:%S') }}"
    git push -u gogs master
  args:
    chdir: roles/ocp4-install-pipelines/git/spring-petclinic-gatling
  when: git_spring_petclinic_gatling.stat.islnk is defined or result is changed
#####

- name: configure webhook on spring-petclinic
  ansible.builtin.uri:
    url: http://{{ r_gogs_route.resources[0].spec.host }}/api/v1/repos/{{ gogs_user }}/spring-petclinic/hooks
    headers:
      Content-Type: application/json
    body_format: json
    method: POST
    user: "{{ gogs_user }}"
    password: "{{ gogs_pwd }}"
    body:
      type: gogs
      config: 
        url: http://{{ r_gogs_webhook_route.resources[0].spec.host }}
        content_type: json
      events: [push]
      active: true
    force_basic_auth: true
    follow_redirects: "yes"
    return_content: true
    status_code: [200, 201]
